__author__ = 'Sereni'
import click
import xml.etree.ElementTree as ET

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


def calculate_completion_rate(xml):
    """
    Input: a stream from xml file, as in file.read()
    Output: a float representing average completion rate for the task.
    """
    root = ET.fromstring(xml)
    sum_correct = 0
    sum_total = 0
    for item in root[0]:
        if item.tag == 'gisting-item':
            correct, total = item.attrib['result'].split(',')[0].split(': ')[1].split('/')
            sum_correct += int(correct)
            sum_total += int(total)
    completion_rate = float(sum_correct)/float(sum_total) * 100
    return completion_rate

@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('--output', '-o', type=click.File('w'), help='Specify output file')
@click.argument('data', nargs=-1)
def create_tsv(output, data):
    """
    This script converts data from Appraise XML result files to TSV file to be used
    with gnuplot. The table can be used to plot a histogram, where x axis is user-specified,
    and y-axis shows the percentage of correct answers in a given task.
    output - path to output file (evaluation.data by default);
    data - a string of "path:label", where PATH is a path to Appraise XML result file,
    and VALUE is the x-axis value for this particular task, separated by a colon (:).

    For example, if you would like to plot the results of evaluation from two tasks,
    one of which offered machine translation for assistance and the other did not,
    the input would look something like
    generate_tsv.py 'result1.xml:with mt' 'result2.xml:without mt' output.data

    Make sure to enclose arguments in single quotes if they contain spaces.
    Use gnuplot to create the plot from data file generated by this script.

    """
    if not output:
        output = open('evaluation.dat', 'w')
    i = 0
    for item in data:
        path, label = item.split(':')
        xml_file = open(path).read()
        completion_rate = calculate_completion_rate(xml_file)
        output.write('{0}\t{1}\t{2}\r\n'.format(str(i), label, str(completion_rate)))
        i += 1
    output.close()

if __name__ == '__main__':
    create_tsv()